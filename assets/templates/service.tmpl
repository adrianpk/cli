package service

import (
	tp "gitlab.com/mikrowezel/backend/granica/pkg/auth/transport"
)

const (
	create{{.Infl.SingularPascalCase}}Err = "cannot create {{.Infl.SingularLowercase}}"
	getAll{{.Infl.SingularPascalCase}}Err = "cannot get {{.Infl.PluralLowercase}} list"
	get{{.Infl.SingularPascalCase}}Err    = "cannot get {{.Infl.SingularLowercase}}"
	update{{.Infl.SingularPascalCase}}Err = "cannot update {{.Infl.SingularLowercase}}"
	delete{{.Infl.SingularPascalCase}}Err = "cannot delete {{.Infl.SingularLowercase}}"
)

func (s *Service) Create{{.Infl.SingularPascalCase}}(req tp.Create{{.Infl.SingularPascalCase}}Req, res *tp.Create{{.Infl.SingularPascalCase}}Res) error {
	// Model
	u := req.ToModel()

	// Repo
	repo, err := s.{{.Infl.SingularCamelCase}}Repo()
	if err != nil {
		res.FromModel(nil, create{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	err = repo.Create(&u)
	if err != nil {
		res.FromModel(nil, create{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	err = repo.Commit()
	if err != nil {
		res.FromModel(nil, create{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	// Output
	res.FromModel(&u, "", nil)
	return nil
}

func (s *Service) Get{{.Infl.PluralPascalCase}}(req tp.Get{{.Infl.PluralPascalCase}}Req, res *tp.Get{{.Infl.PluralPascalCase}}Res) error {
	// Repo
	repo, err := s.{{.Infl.SingularCamelCase}}Repo()
	if err != nil {
		res.FromModel(nil, getAll{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	us, err := repo.GetAll()
	if err != nil {
		res.FromModel(nil, getAll{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	err = repo.Commit()
	if err != nil {
		res.FromModel(nil, getAll{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	// Output
	res.FromModel(us, "", nil)
	return nil
}

func (s *Service) Get{{.Infl.SingularPascalCase}}(req tp.Get{{.Infl.SingularPascalCase}}Req, res *tp.Get{{.Infl.SingularPascalCase}}Res) error {
	// Model
	u := req.ToModel()

	// Repo
	repo, err := s.{{.Infl.SingularCamelCase}}Repo()
	if err != nil {
		res.FromModel(nil, get{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	u, err = repo.GetBySlug(u.Slug.String)
	if err != nil {
		res.FromModel(nil, get{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	err = repo.Commit()
	if err != nil {
		res.FromModel(nil, get{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	// Output
	res.FromModel(&u, "", nil)
	return nil
}

func (s *Service) Update{{.Infl.SingularPascalCase}}(req tp.Update{{.Infl.SingularPascalCase}}Req, res *tp.Update{{.Infl.SingularPascalCase}}Res) error {
	// Repo
	repo, err := s.{{.Infl.SingularCamelCase}}Repo()
	if err != nil {
		res.FromModel(nil, update{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	// Get account
	current, err := repo.GetBySlug(req.Identifier.Slug)
	if err != nil {
		res.FromModel(nil, update{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	// Create a model
	u := req.ToModel()
	u.ID = current.ID

	// Update
	err = repo.Update(&u)
	if err != nil {
		res.FromModel(nil, update{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	err = repo.Commit()
	if err != nil {
		res.FromModel(nil, update{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	// Output
	res.FromModel(&u, "", nil)
	return nil
}

func (s *Service) Delete{{.Infl.SingularPascalCase}}(req tp.Delete{{.Infl.SingularPascalCase}}Req, res *tp.Delete{{.Infl.SingularPascalCase}}Res) error {
	// Repo
	repo, err := s.{{.Infl.SingularCamelCase}}Repo()
	if err != nil {
		res.FromModel(nil, update{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	err = repo.DeleteBySlug(req.Identifier.Slug)
	if err != nil {
		res.FromModel(nil, update{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	err = repo.Commit()
	if err != nil {
		res.FromModel(nil, update{{.Infl.SingularPascalCase}}Err, err)
		return err
	}

	// Output
	res.FromModel(nil, "", nil)
	return nil
}
