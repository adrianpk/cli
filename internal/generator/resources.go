// Code generated for package generator by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/templates/migration.tmpl
// assets/templates/model.tmpl
// assets/templates/repo.tmpl
// assets/templates/server.tmpl
package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTemplatesMigrationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x41\x6b\xf2\x40\x10\x86\xcf\x3b\xbf\x62\xbe\xe0\x21\xf9\xd0\x08\x3d\x0a\x1e\x8a\x2d\xa5\xd0\x83\x25\x1e\x0b\x75\x4d\xc7\xb0\x38\xd9\xd8\xc9\x08\x29\x61\xff\x7b\xd9\xd4\x83\x6d\x11\x14\x7a\xcc\x3b\x99\x67\x5f\xe6\xd9\xdb\x72\x67\x2b\xc2\xda\x55\x62\xd5\x35\x1e\xc0\xd5\xfb\x46\x14\x13\x6e\xaa\x04\x60\x3a\xc5\x85\x90\x55\xea\xfb\x09\xe6\x8f\x7e\xcb\xf9\x92\x0f\x62\x79\x69\xdb\xd2\xf2\xc2\xb6\x84\x93\x10\x56\x76\xc3\xa7\x94\xed\xc1\x97\x98\xd6\xf8\xbf\x76\x55\x76\x39\x21\xcd\x90\x44\x1a\xc1\x1e\x8c\x76\x38\x9b\x63\x9d\x3f\x90\xae\xba\x34\x03\x30\xad\xc6\x64\x3d\x70\x8a\xe7\xa7\xfc\x0b\x5b\x68\x5c\x5f\x03\x98\x38\x48\x5e\x7c\x12\xbf\x01\xcc\xeb\x38\xc2\x70\x8e\xda\xe5\xf7\x1d\x95\x69\xab\x19\x18\xb7\x1d\xd2\x7f\x73\xf4\x8e\xe3\x3b\x46\x48\x0f\xe2\x63\x0a\x26\xfc\xc6\xf4\x3d\x8a\xf5\x15\xe1\x68\x47\x1f\x37\x63\x1c\xb5\xef\x5c\xa8\x38\x5f\xc5\x36\x43\x91\x5b\x56\x92\x42\x31\x04\x40\x6c\x15\x8f\x25\x4f\xfe\xfc\xcb\x86\xb1\x11\xf9\x37\x1c\x10\xc7\x91\x77\x0c\x61\xb0\x75\x27\xcd\xfe\x12\x57\xd2\x30\x6f\x6c\xb9\xfb\xa1\xea\xc2\xf5\xeb\x44\x45\xe8\x19\x4d\x67\x4e\x32\xbb\xda\xda\xb7\x43\x7c\x06\x00\x00\xff\xff\xa2\x64\xfa\x07\xd7\x02\x00\x00")

func assetsTemplatesMigrationTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesMigrationTmpl,
		"assets/templates/migration.tmpl",
	)
}

func assetsTemplatesMigrationTmpl() (*asset, error) {
	bytes, err := assetsTemplatesMigrationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/migration.tmpl", size: 727, mode: os.FileMode(436), modTime: time.Unix(1572532722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesModelTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x10\x02\xc4\xfe\x90\x8f\xba\x07\xe8\x21\x70\x7b\xf0\x21\x45\x50\xb7\x3d\x67\x25\xae\xe4\xad\x29\xae\xc2\x1f\x24\xae\xe1\x77\x2f\xf4\x93\xc4\xb1\x0b\x37\x87\xf6\x66\x2f\x67\x67\x86\xc3\xb1\x3b\xac\x36\xd8\x10\xb4\x62\xc8\x2a\xc5\x6d\x27\x3e\xc2\x4c\x65\xb9\xc1\x88\x25\x06\x2a\xc2\x83\xcd\x15\x40\xde\x70\x5c\xa7\x52\x57\xd2\x16\x01\xa3\x78\x2e\x1a\xd1\x29\xb1\xc9\x95\xca\x0e\x4f\x2d\x97\x45\xf7\x90\xab\xac\x1d\x96\x2c\x8e\xe3\x96\x37\x5e\x1e\xe9\x27\xd9\xa2\xc4\x6a\x43\xce\x14\x83\x6a\xae\xe6\x4a\xc5\x6d\x47\xbd\x6c\x51\xc0\x6e\xa7\x97\xae\xb6\x7a\xc5\xae\x49\x16\xfd\x1d\x86\x0a\xed\x02\x03\xed\xf7\x93\xcf\xec\x2c\x26\x44\x9f\xaa\x08\x3b\x95\x65\xad\x5e\x1a\x72\x91\x6b\xae\x30\xb2\x38\x95\x65\xbb\xdd\xff\xe0\xd1\x35\x04\x17\x1b\xda\x5e\xc1\x45\xe7\xa5\x83\xeb\x0f\xa0\xef\xbc\x74\x1f\xa9\x0e\xfb\xfd\x04\xe3\x1a\x9c\xc4\x11\xa1\x97\xe1\x53\x5b\x92\x31\x64\xa6\xf3\x71\xfc\x19\xdb\x5e\xf3\xe5\x6b\xb2\xf6\xeb\xb6\xeb\x47\xf7\xa6\xbc\xce\x9f\xe7\x0b\xb1\x13\x34\x87\x1f\x41\xdc\xeb\xc9\x9b\x7b\x2c\xb0\xa5\xe9\x1a\x57\xd2\x72\xa4\xb6\x8b\xdb\xfc\x7e\xf2\x43\xce\xbc\x78\x1b\x3f\x03\x00\xb4\xfa\x26\x19\x8e\x2a\xdb\xf7\x41\x16\x05\xac\x28\x2e\x3c\x61\xa4\xef\x68\x13\x05\xa8\xc5\x8f\xb9\x69\x55\x27\x57\xc1\xec\x38\xbd\x03\x55\xf8\xef\x5c\xb4\xf3\x63\xee\xd9\x1c\xc8\x7b\xf1\xb0\x53\x00\x45\x01\x5f\xa8\xb3\x58\x11\x5c\x9e\x91\x18\x72\xd0\xab\xe8\xd9\x35\x97\x83\x39\x74\x12\xd7\xe4\x21\x39\x7e\x48\x04\x3c\x3d\x19\xf9\x91\x74\x59\x43\xbf\x02\x46\x28\x0c\x0f\x42\x4f\x1c\x22\x88\x87\xad\x24\xe8\x3c\xd5\xf4\xca\x21\x8e\xf4\xb4\x16\xe1\x91\xad\x85\x92\x20\x05\x32\x83\xd2\xca\xa6\x06\x1a\x72\xe4\x87\x3a\x4c\xc8\x1b\xe8\x2c\xb2\xeb\x8b\xc3\xae\x19\xb7\xd0\x06\x81\x47\xf1\x1b\x28\x53\x04\x9e\xb8\x5a\xdc\x10\x58\x91\x0d\x04\x6e\xd9\xa2\x07\xb4\x16\x82\x4d\xcd\x18\x33\x61\xb5\x06\x76\x21\xa2\xab\x68\x24\x97\x1a\xe2\x9a\x03\x78\x0a\x92\x7c\x45\x7a\x28\x39\x6b\xd2\xd7\x27\x55\x3f\x48\xe9\xae\x7e\xea\x4b\x99\xf7\xdc\x5d\xfd\x94\x9f\x76\xfe\x14\xfc\xce\xd0\xcf\x52\x1d\xfd\x60\xf4\xf1\x83\x9f\x77\x31\x3f\xcf\x3d\x14\xf5\x84\x72\xae\x32\x4f\x31\x79\x07\x8e\xad\xda\x3f\x77\xf8\x5b\x67\xfe\x59\x87\x0f\xb9\x0f\x3a\xfc\x3e\xf3\x6f\x97\x7f\x63\xfe\x16\x63\xb5\x86\x4a\x9c\xe1\x3e\xc3\xbf\x6a\x7e\xe0\x9e\xc5\xea\x4f\xb8\x52\xc4\xf6\x37\xf2\x53\x31\x6e\x07\xfd\x61\x7b\x21\xe3\xff\xc8\xe4\xdb\xab\xbd\xfa\x15\x00\x00\xff\xff\xad\xd9\xd3\xef\x07\x06\x00\x00")

func assetsTemplatesModelTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesModelTmpl,
		"assets/templates/model.tmpl",
	)
}

func assetsTemplatesModelTmpl() (*asset, error) {
	bytes, err := assetsTemplatesModelTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/model.tmpl", size: 1543, mode: os.FileMode(436), modTime: time.Unix(1572621878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesRepoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x73\xdb\xba\x11\x7e\x26\x7e\xc5\x86\x13\x3b\xa4\xcb\x50\x49\x1f\xd5\xaa\x33\xb1\xe5\x69\xdd\x49\x53\x37\x72\x9a\x87\x34\x93\xc0\xd4\x92\x41\x0c\x5e\x0c\x80\xae\x14\x0d\xff\xfb\x99\x05\x28\x59\x37\x8b\xf2\xb1\x32\x27\x2f\x51\x4c\x2c\xf6\xf2\x7d\xbb\xcb\x5d\x56\x3c\xb9\xe1\x19\x82\xc2\xaa\x64\x4c\xe4\x55\xa9\x0c\x04\xcc\xf3\xaf\xa7\x06\xb5\xcf\x3c\x3f\x29\x0b\x83\x13\x43\xff\x4d\x73\xe3\x33\xe6\xf9\x99\x30\xdf\xea\xeb\x38\x29\xf3\xde\xf7\xbc\x14\xaa\x2c\x7a\xfa\x56\x4e\x7c\x77\x24\xb9\x3b\xca\xc5\x8d\x2a\xff\x8f\x3f\x50\xf6\xae\x79\x72\x83\xc5\xb8\x97\x94\x45\x2a\xb2\x6e\xb9\x4c\xf1\x42\x24\xbc\x27\x0a\x83\xaa\xe0\xb2\x97\x97\x63\x94\x3e\xf3\x64\x99\x65\xa8\xa0\xe3\xba\x2c\x33\x9f\x85\x8c\x99\x69\x85\x14\xcc\x6c\x16\x5f\x14\xa9\x8c\x47\xa2\xc8\x6a\xc9\xd5\x25\xd7\x09\x97\x67\x5c\x63\xd3\xbc\xc7\xaa\x04\x6d\x54\x9d\x18\x98\x31\xcf\x4b\xcc\x04\xda\x90\xe3\x33\xf7\x4b\x4f\xd3\x0c\x4e\x9c\xf7\xf4\x34\x15\x19\xf3\xc8\x19\x38\x71\x1e\xc5\x6f\xed\x0f\xf3\xbc\xab\x09\xc0\x09\xa1\x11\x5f\x4d\x98\xd7\x90\x1b\x69\x5d\x24\x90\xf3\x1b\xec\xf2\x23\xd8\x62\x3c\x82\x4d\xdb\x11\x6c\x9a\x8e\xc0\x4c\x16\x86\x43\x38\xe9\x8c\x79\xc6\x3c\x85\xa6\x56\x05\x1c\x77\xc9\xb6\xb8\xf4\x21\x31\x93\xc8\xa1\xd1\x27\xb7\x22\x07\x42\x9f\xdc\x89\x6c\xec\x7d\x00\x2b\xd2\xb0\x86\xb1\x5e\x0f\xce\x14\x72\x83\xc0\x61\x36\x8b\xdf\xa3\x7e\xc7\x73\x6c\x1a\x88\x1d\x24\xc1\xba\xdd\x33\x9e\xe3\xb2\x8b\x9d\x41\x84\xad\x81\x5d\x9a\xe0\xc4\x26\x4f\xbc\x4b\x57\x08\xa8\x54\xa9\x08\x93\x1d\x9a\xe2\x11\x1a\x67\xef\xbf\x5c\xd6\xa8\x83\x90\x31\x4f\x1b\xe8\x0f\xe0\xeb\x6c\x16\x8f\xfe\xf3\x36\xbe\x28\x34\x2a\x33\x32\x4d\xf3\x95\x31\xef\x4b\x44\x7a\xe9\xbc\x23\xd2\xf8\x6a\x12\x13\x36\xe3\xf3\x09\x26\x81\x36\xd1\xae\x0b\x64\xb5\x65\x0e\x95\x6a\x81\xfe\x3b\x9a\x37\x52\x2e\xae\x5d\xca\x5a\x71\xb9\x1c\x22\xa4\xaa\xcc\x6d\x99\x1f\x10\x7d\x67\x35\x08\xef\x95\x39\xc3\xcb\xf0\x7f\xfa\xdc\x8d\xbf\xc3\xc9\x72\x10\x12\x09\xab\xa0\x8e\x50\x62\x42\x86\xe6\xb8\x92\xf0\x5e\x98\xba\x9b\xc1\xf1\x83\xde\x45\xa0\xcd\x12\x9e\x3b\xe4\x56\xa0\x5e\x4d\xe7\xeb\x29\x5c\x0c\x0f\x8b\x6a\x20\xc6\x60\x9b\x5f\xca\x13\x9c\x35\x21\x04\x7b\x82\xd8\x02\x78\xc7\xd5\x2e\x7c\xa0\x5b\xdb\x46\x6a\x3b\x2c\x4f\xa7\x17\x43\x47\x03\x1d\x0f\x20\xcd\x4d\x3c\xaa\x94\x28\x4c\x6a\xf3\x56\x8c\xe3\x40\x1b\x25\x8a\x2c\x0c\x5b\xa6\xf6\x4b\x7f\x0a\x7a\xa3\x11\x75\x33\xb5\x55\x72\x85\xab\xd3\xe9\x48\xd6\x19\x68\xeb\xbe\xde\x60\x4e\xcb\x3a\x3b\x2c\x77\xce\x60\xa0\xad\x55\x07\xc5\x2f\x44\x1f\xf9\xb6\x8b\x40\x72\xfb\x57\x60\xee\x43\x35\xe6\x06\x57\xf9\x3a\x20\x4f\x4e\xfd\x01\xdf\x1b\x0a\xd3\xbd\xbb\x3d\x21\xb6\xeb\x3d\x73\x31\x8c\x47\x36\x71\x82\x30\x64\x9e\x48\xad\xde\x67\x03\x28\x84\xb4\x33\x4a\x8b\x24\x51\x77\x4e\xf6\xd3\xc0\x4f\x78\x51\x94\x06\x14\x1a\x25\xf0\x8e\xe6\xb9\x14\x15\x16\x09\xee\x72\xa6\x0f\x47\xda\xb7\x5e\x3b\x3d\xd6\x1c\xa5\x4e\xc7\x4b\xd0\x81\xb7\xf4\x12\xec\xf5\xe0\xb4\x16\x72\x0c\xb5\x3d\x01\x6d\xb8\xc1\x1c\x0b\xc3\xbc\xe4\x1b\x2f\x32\xd4\x11\xdc\x9a\x69\x07\x36\x67\x4e\x74\x17\x34\x11\x1c\x2b\x4c\x43\xe6\x55\xa5\x26\x6d\xaf\x98\x27\xb9\x4b\x74\xd2\xff\x57\xf8\x33\x73\xd5\xa3\x0d\xd8\x09\x36\x3e\xad\xd3\x94\x06\x33\x6d\xe2\x8f\x4a\x18\x6c\x81\xf5\x3f\x5c\x0e\xdf\x5c\x9d\xaf\x75\xfc\x51\xc1\x6f\xb0\xa5\x7f\x74\x7e\x05\x3e\x05\x97\x96\x0a\xaa\x08\x74\x45\x56\x14\xb9\x08\x6d\x50\x96\x0c\xb2\x56\x71\x65\x04\x97\x6d\xb9\x33\x8f\x38\xb3\x7e\x91\x80\x37\x3f\x5d\x2d\x36\xff\xe8\x0e\x06\x70\x74\x07\x7e\xe4\xd4\x93\x2d\xaf\x01\x94\x1a\xf7\xb9\x17\x2d\x5d\xf4\x2c\x6b\xeb\x31\xb6\xf7\xad\x5e\xc2\x6b\x00\xf4\xef\x9f\xe0\x35\x8d\x6d\xdc\x56\xbf\x7d\x6c\xb1\x7b\xf9\xda\x51\xbf\xa6\x63\xc5\xf2\xc7\x7f\x9c\xbf\x3f\x07\x31\x86\x01\xbc\x38\xd2\x2f\xfe\xe2\xef\x9c\x53\xee\xd3\x98\xd2\xea\x91\x13\xd0\xa2\x00\xa2\xcd\xf1\x74\x6d\x16\xfa\x59\x9a\x29\xab\x65\x99\xc5\x43\xbc\xae\xb3\x34\xf0\x77\x35\x82\x8d\xc4\xef\xff\xaf\xb0\xb5\x75\x5b\xa3\x9a\x2e\x55\xf3\xfa\xe8\x66\x1b\xda\x53\x6a\x02\xa8\x28\x14\xa6\xfb\xb5\xab\x20\xe7\xd5\x27\x97\xa5\x9f\xdd\x4f\x44\x73\x86\x7d\xe9\xcc\x93\xba\x3f\xb0\xcb\xca\xa6\xa8\x03\xfb\x65\x5b\x03\xcf\x6f\x70\x1a\xc1\xf3\x4a\x95\xb6\x30\xe2\x4b\x55\x56\x43\x4c\x35\x34\x8d\x13\x13\x29\x04\x05\x3a\x89\xf8\x8a\x56\x31\xbf\x52\x22\xe7\x6a\xfa\xe5\x06\xa7\x7e\xb8\x2c\x58\x2a\x08\xf0\x76\x45\xb6\xae\xc5\xd8\x0f\x37\x1e\x3b\x57\xb6\x1c\xd8\x25\x75\xf3\xf1\x75\x59\x4a\xe4\xc5\x96\x13\x9a\xaf\x32\x54\x5b\x4e\x52\x59\xf2\x6d\xba\xc6\x98\x88\x9c\x4b\x3f\x24\xcf\x45\x4a\xb0\xc7\xb3\x59\x2b\xf2\x00\xea\xd0\x34\xf7\x32\xff\x22\x8a\xac\xae\xa6\xa1\x86\x4e\x07\x0f\xf3\xfa\x04\xdd\x76\x63\x73\x7c\x7e\xf2\x17\x22\x67\xa5\xb4\xa5\x00\x4d\xe3\x7f\x86\x01\xf8\xfd\xad\x47\xd4\x08\x2c\x31\x58\x8c\x97\x49\x5a\x43\xe3\xbb\x2e\x0b\x1f\x5a\x28\x9e\x29\x4c\x69\xc0\x88\x87\x88\xd5\xf9\x6d\xcd\x65\xb0\x89\xce\xdc\xf3\xe5\xd4\xb5\x10\xfc\xde\xe8\x6d\xde\x92\x79\xa1\xff\x39\xfa\xf7\xbb\xe0\x49\xca\xee\xab\xd4\xb5\xdf\x27\xe0\x47\x00\xee\x85\xe1\xb5\x28\xb8\x9a\x2e\x50\x94\x58\x3c\x31\x86\xad\xe9\x10\xc2\xdf\xe0\x15\x1c\x1f\xef\xc7\xd2\x23\x14\xef\x45\x5f\x0b\xcb\x43\xae\xfd\x94\x54\xdd\xd2\x4f\xa8\x3f\x6f\xab\x69\x6e\xd0\x88\x7c\xdb\xd1\x8e\xc7\xda\xf0\xbc\xda\x75\x66\x7e\xb4\x0d\xae\xad\x8d\x3d\xe1\x88\x1d\x29\xfb\xf6\x85\x3f\x02\xda\xb5\x88\x33\x2c\x65\x99\x70\x23\x96\x9a\xc1\x23\xe2\x9d\xd7\xdc\xa2\x1b\x3e\x21\xe0\x7b\x65\x87\x0f\x7c\xdb\xff\xdb\x37\xf9\x62\xc2\xa5\xea\x6d\xff\x08\xe9\xdd\x4e\x6b\xcc\x10\x25\xae\xaf\x31\xf7\x9f\x62\x0e\xfe\xe9\xc0\x99\x0b\xc4\x78\xb1\x79\x2e\x16\x94\xd5\x75\xd0\x09\x76\x6f\xf3\xe1\x63\x3f\x63\xb5\x53\xd6\xd6\x8f\x54\x73\xa3\x76\x21\x1f\xdb\x3f\xd6\x3f\x0d\xae\x40\x73\xe0\xdd\x7c\xd9\xfc\xea\x7a\xde\x01\xd2\xbe\x3b\xf3\xc1\x80\x3a\x2b\xf3\x5c\x18\x30\x8a\x17\x9a\x27\x54\x5b\x07\xfc\x62\x6a\x75\x07\x2b\xab\x6b\xd7\x62\x3e\xf7\x79\x7e\x97\x35\xec\xb7\x00\x00\x00\xff\xff\xc2\x24\xc2\x96\x39\x18\x00\x00")

func assetsTemplatesRepoTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesRepoTmpl,
		"assets/templates/repo.tmpl",
	)
}

func assetsTemplatesRepoTmpl() (*asset, error) {
	bytes, err := assetsTemplatesRepoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/repo.tmpl", size: 6201, mode: os.FileMode(436), modTime: time.Unix(1572859599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x5f\x4f\xe3\x3a\x10\xc5\x9f\xeb\x4f\x31\xf2\xcb\x4d\x50\x48\xdf\xaf\xc4\x03\xea\xd5\x05\x16\xb4\x1b\x15\xba\x3c\x1b\x67\x9a\x58\x24\x76\x18\x8f\xa1\x51\x94\xef\xbe\x72\x42\xa1\xfb\x47\x14\xed\x43\xa5\x7a\xea\x73\x3c\xbf\xe3\x71\x3b\xa5\x1f\x55\x85\x30\x0c\x90\x17\x8f\x55\x7e\x8b\xf4\x6c\x34\x16\x8a\x6b\x18\x47\x21\x4c\xdb\x39\x62\x48\xc4\x42\x6a\x67\x19\x77\x2c\xc5\x42\x5a\xe4\x65\xcd\xdc\x49\x21\x16\xb2\x32\x5c\x87\x87\x5c\xbb\x76\x59\xb9\x53\x5d\x9b\xa5\xae\x8d\x14\xa9\x10\xcb\x25\x9c\x77\x1d\xda\x12\xb8\x36\x1e\xd8\x81\x47\x7a\x46\x82\xad\x69\x30\x8f\x3f\x6f\x3c\x82\xf2\xa0\x80\x70\x8b\x84\x56\x63\x06\x86\x01\x5a\xd5\x03\xe1\x53\x30\x84\xe0\x5d\x8b\x80\xa5\xe1\x7c\x72\x5c\xb9\xb6\x45\xcb\xb3\xa5\xd9\x82\x6a\x08\x55\xd9\x43\x89\x5b\x63\xb1\x9c\x6c\xb9\xef\x10\x5e\xfb\xbd\xc6\x1e\x3c\x93\xb1\x95\x10\xda\x59\x3f\xc1\x44\xdc\x2b\xbb\x6d\xf2\x5b\x63\xab\xd0\x28\xba\x71\x2f\x48\x5a\x79\x84\x71\x5c\xf1\x2e\x8a\x0e\xf4\x67\x20\x3f\x54\xec\x69\xd7\xd8\x35\x4a\x23\x24\x1a\x4e\x56\xce\xb2\x32\x16\x29\x85\x87\x1e\x7a\x17\x08\x74\xf0\xec\xda\xd8\x4d\xd0\x1c\xf7\x3b\x8a\xa7\x3c\x23\x45\x1c\x84\x16\xb9\x76\x25\x18\xcb\x0e\x14\x6c\x83\x66\xe3\x6c\x64\xec\x5d\x80\xd2\xd9\x7f\x18\x2c\x62\x19\x83\x54\xcc\x4a\xd7\x10\x43\xd9\x06\xab\x7f\x3d\xb1\x55\x8f\x78\xae\xb5\x0b\x96\xcf\x8b\xab\xb5\x0b\x8c\x94\x74\x8a\x62\x70\xba\x36\xf9\x5c\x49\x0f\xbe\xc3\x20\x16\x84\x1c\xc8\xc2\xbc\x6f\xae\x27\x72\x39\x0c\x33\x78\xd1\x04\x52\xcd\x1b\xf6\x38\xca\x0c\xe2\xd9\x89\xae\x7f\xf2\x1c\xc4\x62\xa1\xeb\xbc\x70\x9e\x13\xb9\x94\x19\xe8\x7c\x45\xa8\x18\x7f\x8b\xb0\x50\x5e\xab\x66\x35\x67\xf8\xe5\xf6\xdb\xd7\x74\x96\x5e\xe0\x9b\xf2\x02\xf9\xd3\xb2\xf7\x86\xe5\x20\xc7\xf1\xc3\x1b\x1b\x06\x39\xca\x77\x04\xff\x07\x86\x85\xd7\x75\xbe\xf1\x98\x1c\x1b\x96\x74\xbf\xf9\x6f\xfa\x9e\x84\x45\x78\x13\x6e\xba\xf2\xd3\x51\x4d\xda\xff\xb0\xc1\x09\x7b\x92\xcf\xab\xcf\xc9\xc7\x54\xc4\xcf\x28\xe6\x11\x3a\x86\x99\x58\xdc\x31\xc4\x67\x9f\x5f\x2a\x5b\x36\x31\xa7\xc3\xd5\xc1\x04\x1d\x96\xff\x8f\xf9\x4e\x21\xbf\xcc\xf5\x35\xfa\xce\x59\x8f\xf7\x64\x18\x29\x03\x82\x93\xd7\xfa\x53\x40\xcf\x73\xf8\xbe\x09\x15\xfc\x7b\x36\x5d\xca\x66\x7d\x53\x28\x52\x6d\x42\xd9\x91\x77\x78\x1a\x65\x72\x1a\x07\xde\x4d\xf2\xf9\x0d\xe7\xf7\x86\xeb\xef\xaa\x09\x98\x50\xbe\x9a\x6b\x49\x9a\x1d\x45\xbe\xc6\x3e\x83\xe8\x19\x2d\x23\xfe\xf4\xff\x88\x97\x77\x77\x45\xf2\x92\x01\x4d\xbe\x7b\x3f\xcd\xbb\x74\x9f\xe8\x8f\x00\x00\x00\xff\xff\x82\x0b\x9b\xf6\x57\x05\x00\x00")

func assetsTemplatesServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesServerTmpl,
		"assets/templates/server.tmpl",
	)
}

func assetsTemplatesServerTmpl() (*asset, error) {
	bytes, err := assetsTemplatesServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/server.tmpl", size: 1367, mode: os.FileMode(436), modTime: time.Unix(1572865872, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/templates/migration.tmpl": assetsTemplatesMigrationTmpl,
	"assets/templates/model.tmpl":     assetsTemplatesModelTmpl,
	"assets/templates/repo.tmpl":      assetsTemplatesRepoTmpl,
	"assets/templates/server.tmpl":    assetsTemplatesServerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"migration.tmpl": &bintree{assetsTemplatesMigrationTmpl, map[string]*bintree{}},
			"model.tmpl":     &bintree{assetsTemplatesModelTmpl, map[string]*bintree{}},
			"repo.tmpl":      &bintree{assetsTemplatesRepoTmpl, map[string]*bintree{}},
			"server.tmpl":    &bintree{assetsTemplatesServerTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
